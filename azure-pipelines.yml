# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install NuGet'

- task: Cache@2
  inputs:
    key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/**/packages.lock.json'
    restoreKeys: |
       nuget | "$(Agent.OS)"
       nuget
    path: $(NUGET_PACKAGES)
  displayName: Cache NuGet packages

- task: NuGetCommand@2
  displayName: 'Restore NuGet packages'
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build solution'
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  displayName: Run Unit Tests
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.UnitTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    codeCoverageEnabled: True
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    testRunTitle: UnitTests
    
- task: VSTest@2
  displayName: Run Component Tests
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.ComponentTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    codeCoverageEnabled: True
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    testRunTitle: ComponentTests


- task: VSTest@2
  displayName: 'Run integration tests'
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: |
      **\*.IntegrationTests.dll
      !**\*TestAdapter.dll
      !**\obj\**
    searchFolder: '$(System.DefaultWorkingDirectory)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    testRunTitle: 'Integration tests'


- task: DotNetCoreCLI@2
  displayName: "Create NuGet Package"
  inputs:
    packDirectory: '$(Build.ArtifactStagingDirectory)/NuGet'
    command: 'pack'
    arguments: '--configuration $(buildConfiguration)'
    packagesToPack: 'JoostIT.WinchHunt.WinchHuntNet/JoostIT.WinchHunt.WinchHuntNet.csproj'
    nobuild: true
    versioningScheme: 'off'


- task: DotNetCoreCLI@2
  displayName: 'Create WinchHuntCmd publish'
  inputs:
    arguments: '--output $(Build.ArtifactStagingDirectory)/WinchHuntCmd'
    command: 'publish'
    configuration: $(BuildConfiguration)
    publishWebProjects: false
    projects: 'JoostIT.WinchHunt.WinchHuntCmd/JoostIT.WinchHunt.WinchHuntCmd.csproj'


- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact WinchHuntCmd'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/WinchHuntCmd'
    ArtifactName: 'WinchHuntCmd'
    publishLocation: 'Container'

- task: PublishBuildArtifacts@1
  displayName: 'Publish artifact NuGet Package'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/NuGet'
    ArtifactName: 'Package'
    publishLocation: 'Container'


- task: CmdLine@2
  displayName: 'Set Git Info'
  inputs:
    script: |
      git config --global user.email "dev@joostit.com"
      git config --global user.name "Joost Haverkort"

- task: shellexec@0
  displayName: 'Create tracking branches'
  inputs:
    code: 'git branch -r | grep -v ''\->'' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done'

- task: shellexec@0
  displayName: 'Push to GitHub'
  inputs:
    code: 'git push https://$(GitHubToken)@github.com/joostit/WinchHuntNet.git -u --all --force'