<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JoostIT.WinchHunt.WinchHuntNet</name>
    </assembly>
    <members>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceEventArgs">
            <summary>
            Event argutments for Device related events
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceEventArgs.Device">
            <summary>
            Gets the device info for the device that concerns this event
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceEventArgs.#ctor(JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo)">
            <summary>
            Constructor
            </summary>
            <param name="device"></param>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo">
            <summary>
            Holds information about a device
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.Name">
            <summary>
            The device name
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.Id">
            <summary>
            The device ID
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.Hardware">
            <summary>
            The device Hardware
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.Version">
            <summary>
            The device Version
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.DeviceType">
            <summary>
            The type of device
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceInfo.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceTypes">
            <summary>
            Defines different WinchHunt device types
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceTypes.Unknown">
            <summary>
            Indicates an unknown device or an error
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceTypes.Hunter">
            <summary>
            A Hunter
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.Data.DeviceTypes.Fox">
            <summary>
            A Fox
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo">
            <summary>
            Holds GPS state information
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Latitude">
            <summary>
            Gets the latitude
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Longitude">
            <summary>
            Gets the longitute
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Satellites">
            <summary>
            Gets the number of satellites currently being tracked
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Speed">
            <summary>
            Gets the speed (in km/h)
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Altitude">
            <summary>
            Gets the altitude (in meters)
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.Hdop">
            <summary>
            Gets the GPS HDOP value
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.GpsInfo.HasFix">
            <summary>
            Gets whether the GPS receiver has a valid fix
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.WinchFox">
            <summary>
            Represents a Fox device in the WinchHunt system
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.WinchFox.Gps">
            <summary>
            Gets last known GPS state information
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.WinchFox.LastRssi">
            <summary>
            Gets or sets the last RSSI at which this Fox was received
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.Data.WinchFox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.Data.WinchHuntDevice">
            <summary>
            A base class that represents any WinchHunt device
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.WinchHuntDevice.Device">
            <summary>
            Gets Device information
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.Data.WinchHuntDevice.LastUpdate">
            <summary>
            Gets the time stamp of the last update that was received from the device
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.Data.WinchHuntDevice.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.Data.WinchHuntDevice.SetLastUpdateNow">
            <summary>
            Call this method to indicate that information was updated and to update the time stamp.
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.DeviceManager">
            <summary>
            Manages devices. Note that instances of this class are not completely thread safe
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.DeviceManager.Foxes">
            <summary>
            Gets known foxes
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.DeviceManager.MaxFoxAge">
            <summary>
            The maximum timespan that a Fox can be inactive, before being removed from the Foxes collection.
            </summary>
        </member>
        <member name="E:JoostIT.WinchHunt.WinchHuntNet.DeviceManager.FoxAdded">
            <summary>
            Gets raised when a new fox is added to the collection
            </summary>
        </member>
        <member name="E:JoostIT.WinchHunt.WinchHuntNet.DeviceManager.FoxUpdated">
            <summary>
            Gets raised when a already known fox is updated
            </summary>
        </member>
        <member name="E:JoostIT.WinchHunt.WinchHuntNet.DeviceManager.FoxRemoved">
            <summary>
            Gets raised when a fox is removed from the collection
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.FoxMessage">
            <summary>
            Defines a Fox Message as used by LoRa communication
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.FoxMessage.Device">
            <summary>
            Gets or sets the Device information
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.FoxMessage.Gps">
            <summary>
            Gets or sets GPS information
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.FoxMessage.Rssi">
            <summary>
            Gets or sets the RSSI at which this message was received.
            Note that this is not included in the LoRa message sent by the fox itself, but added later.
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.FoxMessage.ToString">
            <summary>
            Returns a string representation of the state of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraDeviceInfo">
            <summary>
            Defines Device information as used by LoRa communication
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraDeviceInfo.Name">
            <summary>
            Gets or sets the device name
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraDeviceInfo.Id">
            <summary>
            Gets or sets the device ID
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraDeviceInfo.Hardware">
            <summary>
            Gets or sets the device hardware ID
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraDeviceInfo.Version">
            <summary>
            Gets or sets the device version
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo">
            <summary>
            Defines a GPS Message as used by LoRa communication
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Latitude">
            <summary>
            Gets or sets Latitude
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Longitude">
            <summary>
            Gets or sets Longitude
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Satellites">
            <summary>
            Gets or sets the number of sattelites
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Speed">
            <summary>
            Gets or sets the speed
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Altitude">
            <summary>
            Gets or sets the altitude
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.Hdop">
            <summary>
            Gets or sets the HDOP value
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.LoraMessaging.LoraGpsInfo.hasFix">
            <summary>
            Gets or sets whether a fix has been obtained
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1">
            <summary>
            Holds the result of a packet parsing operation
            </summary>
            typeparam name="TPacket">The result packet type
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1.Result">
            <summary>
            The result package. Null if the parsing was unsuccessful
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1.#ctor(`0)">
            <summary>
            Constructor. Creates a valid PacketParseResult with the provided package
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1.#ctor(System.Exception)">
            <summary>
            Constructor. Creates an invalid PacketParseResult with the provided exception
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1.#ctor(System.String)">
            <summary>
            Constructor. Creates an invalid PacketParseResult with the provided error message
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.PacketParseResult`1.ToString">
            <summary>
            Returns a String representation of the state of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.ParseResult">
            <summary>
            Non-generic base class for a packet parse result
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.ParseResult.IsValid">
            <summary>
            Returns true if this object holds a valid result object. Otherwise false
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.ParseResult.ParseException">
            <summary>
            Gets the Exception that occured during parsing, if available. Otherwise null.
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.ParseResult.HasException">
            <summary>
            Returns true if this object has a ParseException associtated with it. 
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.ParseResult.ErrorMessage">
            <summary>
            Gets the error message that resulted from the parsing operation, if available.
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.ParseResult.#ctor">
            <summary>
            Constructor. Creates a valid Parse result
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.ParseResult.#ctor(System.Exception)">
            <summary>
            Constructor. Creates an invalid ParseResult with the provided exception
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.ParseResult.#ctor(System.String)">
            <summary>
            Constructor. Creates an invalid ParseResult with the provided error message
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.ParseResult.ToString">
            <summary>
            Returns a string representation of the current state of this object
            </summary>
            <returns></returns>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket">
            <summary>
            Represents a serial data packet
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.LengthFieldLength">
            <summary>
            Defines the length of the [Length] field
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.TypeFieldLength">
            <summary>
            Defines the length of the [Type] field
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.StartSequence">
            <summary>
            Defines the Start sequence
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.EndSequence">
            <summary>
            Defines the end sequence
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.DataLength">
            <summary>
            Gets or sets the data length
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.Data">
            <summary>
            Gets or sets the actual data part
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket.PacketType">
            <summary>
            Gets or sets the packet type
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketBuilder.ProcessSerialData(System.String)">
            <summary>
            Processes new Serial data to find packets. New packets will be raised via the PacketReceived event
            </summary>
            <param name="data">Newly received data from the serial port</param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketBuilder.Reset">
            <summary>
            Resets the builder by resetting the internal state machine to Idle
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketTypes">
            <summary>
            Defines different serial packet types
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketTypes.Invalid">
            <summary>
            An invalid or undefined packet type
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketTypes.LoraRx">
            <summary>
            A Lora packet that was received
            </summary>
        </member>
        <member name="F:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacketTypes.HeartBeat">
            <summary>
            A heartbeat signal
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPortConnector.Dispose">
            <summary>
            Closes the connection and disposes all resources
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPortConnector.Dispose(System.Boolean)">
            <summary>
            Disposes all resources
            </summary>
            <param name="disposing">True if called from Dispose(). False when called from the finalizer</param>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.DataRxEventHandler">
            <summary>
            Defines the Event Handler for the SerialDataReceived event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.DataRxEventArgs">
            <summary>
            Event Arguments for receiving serial data
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.DataRxEventArgs.Packet">
            <summary>
            Gets the serial packet that was received
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.DataRxEventArgs.ResultPackage">
            <summary>
            The ParseResult of this RX operation, if one was created
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.DataRxEventArgs.#ctor(JoostIT.WinchHunt.WinchHuntNet.SerialConnection.SerialPacket,JoostIT.WinchHunt.WinchHuntNet.ParseResult)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector">
            <summary>
            Main utility class that connects to a WinchHunt device
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.DeviceManager">
            <summary>
            Gets the device manager that holds access to all known devices
            </summary>
        </member>
        <member name="P:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.IsConnected">
            <summary>
            Gets or sets whether there's a live connection to the WincHunt device
            </summary>
        </member>
        <member name="E:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.SerialDataRx">
            <summary>
            Gets raised after serial data has been received and processed internally
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.Connect(System.String)">
            <summary>
            Connects to a WinchHunt device over the serial port
            </summary>
            <param name="portName">The port name to connect to. Note that this is case sensitive!</param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.GetAvailablePorts">
            <summary>
            Gets a list of all available serial ports
            </summary>
            <returns>A list of strings that contain the serial port names</returns>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.Dispose">
            <summary>
            Closes the connection and disposes all resources
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.Dispose(System.Boolean)">
            <summary>
            Disposes all resources
            </summary>
            <param name="disposing">True if called from Dispose(). False when called from the finalizer</param>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.#ctor">
            <summary>
            Constructor. Creates a new instance of this object
            </summary>
        </member>
        <member name="M:JoostIT.WinchHunt.WinchHuntNet.WinchHuntConnector.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
    </members>
</doc>
